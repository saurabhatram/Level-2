//https://leetcode.com/problems/binary-tree-level-order-traversal-ii/ 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
   /* 
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
     
    Queue<TreeNode> qu= new LinkedList<>();
    List<List<Integer>> al = new ArrayList<List<Integer>>();
        
    if(root==null)
        return al;
        
    qu.add(root);
        
    while(qu.size()!=0)
    {
        int size= qu.size();
        
        List<Integer> li= new ArrayList<>();
            
         while(size-->0)
        {
            TreeNode front= qu.remove();
            
            if(front.left!=null)
                qu.add(front.left);
            if(front.right!=null)
                qu.add(front.right);
            
            li.add(front.val);
        }
        al.add(li);
    }
        
    Collections.reverse(al);
    return al;
    }
    
    */
     public List<List<Integer>> levelOrderBottom(TreeNode root) {
     
         Queue<TreeNode> qu= new LinkedList<>();
         List<List<Integer>> al = new ArrayList<List<Integer>>();
         Stack<List<Integer>> st= new Stack<List<Integer>>();
         
         qu.add(root);
         qu.add(null);
         ArrayList<Integer> temp= new ArrayList<>();
         while(qu.size()!=0)
         {
             TreeNode rem= qu.remove();
        
             if(rem==null)
             {
                 
                 System.out.println();
             }
             else
                 System.out.print(rem.val);   
             if(rem.left!=null)
             {
                 qu.add(rem.left);
             }
            if(rem.right!=null)
             {
                 qu.add(rem.right);                 
             }
             
             
         }
         
         return al;
     }

}